[gd_scene load_steps=28 format=2]

[sub_resource type="VisualShaderNodeIf" id=27]

[sub_resource type="VisualShaderNodeInput" id=10]
output_port_for_preview = 0
input_name = "alpha"

[sub_resource type="VisualShaderNodeScalarOp" id=11]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.5 ]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=12]
output_port_for_preview = 0
input_name = "time"

[sub_resource type="VisualShaderNodeScalarOp" id=13]
output_port_for_preview = 0
operator = 4

[sub_resource type="VisualShaderNodeScalarFunc" id=14]
output_port_for_preview = 0
function = 0

[sub_resource type="VisualShaderNodeColorConstant" id=15]
output_port_for_preview = 1
constant = Color( 1, 0, 0, 1 )

[sub_resource type="VisualShader" id=16]
code = "shader_type canvas_item;



void vertex() {
// Output:0

}

void fragment() {
// Color:9
	vec3 n_out9p0 = vec3(1.000000, 0.000000, 0.000000);
	float n_out9p1 = 1.000000;

// Input:2
	float n_out2p0 = COLOR.a;

// ScalarOp:3
	float n_in3p1 = 0.50000;
	float n_out3p0 = n_out2p0 * n_in3p1;

// Input:5
	float n_out5p0 = TIME;

// ScalarFunc:8
	float n_out8p0 = sin(n_out5p0);

// ScalarOp:6
	float n_out6p0 = mod(n_out3p0, n_out8p0);

// If:11
	float n_in11p1 = 0.00000;
	float n_in11p2 = 0.00001;
	vec3 n_in11p3 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in11p5 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out11p0;
	if(abs(n_out6p0 - n_in11p1) < n_in11p2)
	{
		n_out11p0 = n_in11p3;
	}
	else if(n_out6p0 < n_in11p1)
	{
		n_out11p0 = n_in11p5;
	}
	else
	{
		n_out11p0 = vec3(n_out6p0);
	}

// Output:0
	COLOR.rgb = n_out9p0;
	COLOR.a = dot(n_out11p0, vec3(0.333333, 0.333333, 0.333333));

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -178.13, -300 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 2580, -380 )
nodes/fragment/2/node = SubResource( 10 )
nodes/fragment/2/position = Vector2( -80, -180 )
nodes/fragment/3/node = SubResource( 11 )
nodes/fragment/3/position = Vector2( 400, -80 )
nodes/fragment/5/node = SubResource( 12 )
nodes/fragment/5/position = Vector2( 220, 420 )
nodes/fragment/6/node = SubResource( 13 )
nodes/fragment/6/position = Vector2( 1360, -80 )
nodes/fragment/8/node = SubResource( 14 )
nodes/fragment/8/position = Vector2( 620, 260 )
nodes/fragment/9/node = SubResource( 15 )
nodes/fragment/9/position = Vector2( 980, -400 )
nodes/fragment/11/node = SubResource( 27 )
nodes/fragment/11/position = Vector2( 2200, -100 )
nodes/fragment/connections = PoolIntArray( 2, 0, 3, 0, 3, 0, 6, 0, 5, 0, 8, 0, 8, 0, 6, 1, 9, 0, 0, 0, 11, 0, 0, 1, 6, 0, 11, 0, 6, 0, 11, 4 )

[sub_resource type="ShaderMaterial" id=17]
shader = SubResource( 16 )

[sub_resource type="QuadMesh" id=9]
size = Vector2( 100, 100 )

[sub_resource type="VisualShaderNodeScalarFunc" id=1]
output_port_for_preview = 0
function = 0

[sub_resource type="VisualShaderNodeScalarOp" id=2]
output_port_for_preview = 0
default_input_values = [ 0, 0.75, 1, 0.0 ]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=3]
output_port_for_preview = 0
input_name = "color"

[sub_resource type="VisualShaderNodeColorOp" id=4]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 250, 0, 0 ) ]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=5]
output_port_for_preview = 0
input_name = "time"

[sub_resource type="VisualShaderNodeVectorOp" id=6]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 250, 0, 0 ), 1, Vector3( 0, 0, 0 ) ]
operator = 1

[sub_resource type="VisualShader" id=7]
code = "shader_type canvas_item;



void vertex() {
// Output:0

}

void fragment() {
// Input:2
	vec3 n_out2p0 = COLOR.rgb;

// Input:8
	float n_out8p0 = TIME;

// ScalarFunc:10
	float n_out10p0 = sin(n_out8p0);

// ScalarOp:12
	float n_in12p0 = 0.75000;
	float n_out12p0 = n_in12p0 * n_out10p0;

// VectorOp:9
	vec3 n_in9p0 = vec3(250.00000, 0.00000, 0.00000);
	vec3 n_out9p0 = n_in9p0 - vec3(n_out12p0);

// ColorOp:3
	vec3 n_out3p0 = min(n_out2p0, n_out9p0);

// Output:0
	COLOR.rgb = n_out3p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -178.13, -300 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 2220, -100 )
nodes/fragment/2/node = SubResource( 3 )
nodes/fragment/2/position = Vector2( -100, 0 )
nodes/fragment/3/node = SubResource( 4 )
nodes/fragment/3/position = Vector2( 1720, 0 )
nodes/fragment/8/node = SubResource( 5 )
nodes/fragment/8/position = Vector2( -48.5201, 358.225 )
nodes/fragment/9/node = SubResource( 6 )
nodes/fragment/9/position = Vector2( 1320, 140 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 520, 300 )
nodes/fragment/12/node = SubResource( 2 )
nodes/fragment/12/position = Vector2( 940, 160 )
nodes/fragment/connections = PoolIntArray( 2, 0, 3, 0, 3, 0, 0, 0, 9, 0, 3, 1, 8, 0, 10, 0, 12, 0, 9, 1, 10, 0, 12, 1 )

[sub_resource type="ShaderMaterial" id=8]
shader = SubResource( 7 )

[sub_resource type="VisualShaderNodeScalarOp" id=18]
default_input_values = [ 0, 0.0, 1, 100.0 ]
operator = 2

[sub_resource type="VisualShaderNodeIf" id=19]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeBooleanConstant" id=20]
constant = true

[sub_resource type="VisualShaderNodeColorConstant" id=21]
constant = Color( 0, 1, 0.00636387, 1 )

[sub_resource type="VisualShaderNodeColorConstant" id=22]
constant = Color( 1, 0.180116, 0, 1 )

[sub_resource type="VisualShaderNodeInput" id=23]
output_port_for_preview = 0
input_name = "time"

[sub_resource type="VisualShaderNodeScalarFunc" id=24]
output_port_for_preview = 0
function = 0

[sub_resource type="VisualShader" id=25]
code = "shader_type canvas_item;



void vertex() {
// Output:0

}

void fragment() {
// Input:7
	float n_out7p0 = TIME;

// ScalarFunc:9
	float n_out9p0 = sin(n_out7p0);

// ScalarOp:11
	float n_in11p1 = 100.00000;
	float n_out11p0 = n_out9p0 * n_in11p1;

// Boolean:3
	bool n_out3p0 = true;

// Color:5
	vec3 n_out5p0 = vec3(0.000000, 1.000000, 0.006364);
	float n_out5p1 = 1.000000;

// Color:6
	vec3 n_out6p0 = vec3(1.000000, 0.180116, 0.000000);
	float n_out6p1 = 1.000000;

// If:2
	float n_in2p2 = 0.00001;
	vec3 n_out2p0;
	if(abs(n_out11p0 - (n_out3p0 ? 1.0 : 0.0)) < n_in2p2)
	{
		n_out2p0 = n_out5p0;
	}
	else if(n_out11p0 < (n_out3p0 ? 1.0 : 0.0))
	{
		n_out2p0 = n_out6p0;
	}
	else
	{
		n_out2p0 = n_out5p0;
	}

// Output:0
	COLOR.rgb = n_out2p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -178.13, -300 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 1380, 160 )
nodes/fragment/2/node = SubResource( 19 )
nodes/fragment/2/position = Vector2( 1100, 260 )
nodes/fragment/3/node = SubResource( 20 )
nodes/fragment/3/position = Vector2( 540, 400 )
nodes/fragment/5/node = SubResource( 21 )
nodes/fragment/5/position = Vector2( 380, 620 )
nodes/fragment/6/node = SubResource( 22 )
nodes/fragment/6/position = Vector2( 660, 640 )
nodes/fragment/7/node = SubResource( 23 )
nodes/fragment/7/position = Vector2( -180, -100 )
nodes/fragment/9/node = SubResource( 24 )
nodes/fragment/9/position = Vector2( 180, 20 )
nodes/fragment/11/node = SubResource( 18 )
nodes/fragment/11/position = Vector2( 660, 100 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0, 3, 0, 2, 1, 5, 0, 2, 3, 6, 0, 2, 5, 7, 0, 9, 0, 9, 0, 11, 0, 11, 0, 2, 0, 5, 0, 2, 4 )

[sub_resource type="ShaderMaterial" id=26]
shader = SubResource( 25 )

[node name="Node2D" type="Node2D"]

[node name="MeshInstance2D3" type="MeshInstance2D" parent="."]
material = SubResource( 17 )
position = Vector2( 475.398, 69.2174 )
mesh = SubResource( 9 )

[node name="MeshInstance2D" type="MeshInstance2D" parent="."]
material = SubResource( 8 )
position = Vector2( 138.435, 66.7004 )
mesh = SubResource( 9 )

[node name="MeshInstance2D2" type="MeshInstance2D" parent="."]
material = SubResource( 26 )
position = Vector2( 305.815, 67.3297 )
mesh = SubResource( 9 )
